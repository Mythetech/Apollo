@inject Apollo.Components.Hosting.WebHostConsoleService ConsoleOutputService
@using System.Runtime.InteropServices
@using Apollo.Components.DynamicTabs
@using Apollo.Components.Solutions
@using Apollo.Components.Theme
@using global::Apollo.Components.Console
@using Environment = System.Environment
@inherits Apollo.Components.DynamicTabs.DynamicTabView
@implements IDisposable
<div class="d-flex pa-1 mud-width-full mud-height-full flex-grow-1 overflow-y-hidden" style="flex-direction:column;">
    <MudStack Row="true" Class="flex-grow-1" Spacing="1">
        <MudChipSet SelectedValues="@ConsoleOutputService.Selected" SelectedValuesChanged="@((IReadOnlyCollection<string>s) => { ConsoleOutputService.Selected = s;  StateHasChanged(); })" SelectionMode="SelectionMode.MultiSelection" CheckMark="false">
            <MudChip Variant="Variant.Filled" Color="Color.Dark" Value="@("Debug")" />
            <MudChip Variant="Variant.Filled" Color="Color.Info" Value="@("Trace")" />
            <MudChip Variant="Variant.Filled" Color="Color.Info" Value="@("Info")" />
            <MudChip Variant="Variant.Filled" Color="Color.Warning" Value="@("Warning")" />
            <MudChip Variant="Variant.Filled" Color="Color.Error" Value="@("Error")" />
        </MudChipSet>

        <MudSpacer/>
        <MudTooltip Text="Copy Output">
            <MudIconButton Icon="@ApolloIcons.Copy" OnClick="(ConsoleOutputService.CopyLogsAsync)"/>
        </MudTooltip>
        <MudTooltip Text="Clear Output">
            <MudIconButton Icon="@ApolloIcons.Delete" OnClick="ClearLogs"/>
        </MudTooltip>
    </MudStack>

    <MudList Dense="true" T="ConsoleOutputViewModel" Class="mud-height-full overflow-y-auto pa-4">
        @foreach (var log in Filter(ConsoleOutputService.Logs))
        {
            <MudText id="@log.HtmlId" Color="@ConsoleOutputService.GetSeverityColor(log.Severity)" Class="@(log.Severity is ConsoleSeverity.Debug ? "mud-text-secondary" : "")" Style="@(log.Severity is ConsoleSeverity.Trace ? "color:var(--mud-palette-info-lighten)" : "")">
                [@log.Timestamp.ToString("HH:mm:ss")] @log.Message
            </MudText>
        }
    </MudList>
</div>
@code {
    [Inject] protected IHostingService State { get; set; } = default!;
    [Inject] protected IScrollManager ScrollManager { get; set; } = default!;
    
    private List<ConsoleOutputViewModel> Filter(IEnumerable<ConsoleOutputViewModel> logs)
    {
        // Parse the selected severities from the _selected collection
        var selectedSeverities = ConsoleOutputService.Selected
            .Select(s => Enum.TryParse<ConsoleSeverity>(s, out var severity) ? severity : (ConsoleSeverity?)null)
            .Where(severity => severity.HasValue)
            .Select(severity => severity.Value)
            .ToHashSet();

        // Filter the logs based on the selected severities
        return logs
            .Where(log => selectedSeverities.Contains(log.Severity))
            .ToList();
    }

    protected void ConsoleStateChanged(ConsoleOutputViewModel log) => StateHasChanged();

    protected override void OnInitialized()
    {
        ConsoleOutputService.OnConsoleOutputReceived += ConsoleStateChanged;
        ConsoleOutputService.OnConsoleCleared += StateHasChanged;
        //State.OnCodeAnalysisStateChanged += StateHasChangedAsync;
        ConsoleOutputService.ScrollManager = ScrollManager;

    }
    
    protected async Task StateHasChangedAsync() => await Task.FromResult(StateHasChanged);

    private async Task ClearLogs()
    {
        ConsoleOutputService.ClearConsole();
    }

    public void Dispose()
    {
        ConsoleOutputService.OnConsoleOutputReceived -= ConsoleStateChanged;
        ConsoleOutputService.OnConsoleCleared -= StateHasChanged;    
    }

    public override string Name { get; set; } = "Web Host";
    public override Type ComponentType { get; set; } = typeof(WebHostOutputTab);
    public override string DefaultArea  => DropZones.Bottom;
}